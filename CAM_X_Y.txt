#include <SoftwareSerial.h>
SoftwareSerial mySerial(10,11); // RX, TX pins

int x_deviation = 0, y_deviation = 0;
char x ,y,flag;

void CTRL_MOTORS(int x_deviation, int y_deviation);

#define MOTOR_X_RIGHT  2
#define MOTOR_X_LEFT 3
#define MOTOR_Y_FORWARD  4
#define MOTOR_Y_BACKWARD 5

#define Tolerance_POS    5
#define Tolerance_NEG    -5

#define Motor_ON    2000
#define Motor_OFF   1000

void setup() {

   pinMode(MOTOR_X_RIGHT, OUTPUT);
   pinMode(MOTOR_X_LEFT, OUTPUT);
   pinMode(MOTOR_Y_FORWARD, OUTPUT);
   pinMode(MOTOR_Y_BACKWARD, OUTPUT);
  // Start the serial communication with the PC
  Serial.begin(9600);

  // Start the serial communication with Python
  mySerial.begin(9600);
  delay(2000);
  
}

void loop() {
  // Check if data is available from Python
    if (mySerial.available() >= 2) { // We expect 2 characters for X and Y deviations
    // Read the incoming data (two characters for X and Y deviations)
    x = mySerial.read();
    y = mySerial.read();

    x_deviation = static_cast<int>(x);
    y_deviation = static_cast<int>(y);

    // Print the received deviations
    Serial.print("X Deviation: ");
    Serial.println(x_deviation);
    Serial.print("Y Deviation: ");
    Serial.println(y_deviation);

    
   CTRL_MOTORS( x_deviation, y_deviation);
    
  }


 
}

void CTRL_MOTORS(int x_deviation, int y_deviation)
{

  /****************** MOVING X **************************/

  if( x_deviation <= Tolerance_NEG)     // move left
  {
      digitalWrite(MOTOR_X_RIGHT, LOW);    
      digitalWrite(MOTOR_X_LEFT, HIGH);
      Serial.println("MOTOR X CW MOVING LEFT");
      delay(Motor_ON);                       
      digitalWrite(MOTOR_X_RIGHT, HIGH);   
      digitalWrite(MOTOR_X_LEFT, HIGH);
      Serial.println("MOTOR X STOP");
      delay(Motor_OFF);   
    
  } 
  else if(x_deviation >= Tolerance_POS)  // move right
  {  
      digitalWrite(MOTOR_X_RIGHT, HIGH);    
      digitalWrite(MOTOR_X_LEFT, LOW);
      Serial.println("MOTOR X CCW MOVING right");
      delay(Motor_ON);                       
      digitalWrite(MOTOR_X_RIGHT, HIGH);   
      digitalWrite(MOTOR_X_LEFT, HIGH);
      Serial.println("MOTOR X STOP");
      delay(Motor_OFF);   
    
  }
  else if((x_deviation >= Tolerance_NEG) && (x_deviation <= Tolerance_POS)) {
     Serial.println("MOTOR X STOP IN ELSE");
     digitalWrite(MOTOR_X_RIGHT, HIGH);
     digitalWrite(MOTOR_X_LEFT, HIGH);
     delay(Motor_OFF);   
  }
  else 
    {

     Serial.println("MOTOR X STOP IN ELSE");
     digitalWrite(MOTOR_X_RIGHT, HIGH);
     digitalWrite(MOTOR_X_LEFT, HIGH);
      delay(Motor_OFF);   
    }
/****************** MOVING Y **************************/
  if( y_deviation >= Tolerance_POS)     // move up
  {
      digitalWrite(MOTOR_Y_FORWARD, LOW);    
      digitalWrite(MOTOR_Y_BACKWARD, HIGH);
      Serial.println("MOTOR Y CW MOVING UP");
      delay(Motor_ON);                       
      digitalWrite(MOTOR_Y_FORWARD, HIGH);   
      digitalWrite(MOTOR_Y_BACKWARD, HIGH);
      Serial.println("MOTOR Y STOP");
      delay(Motor_OFF);    
  } 
  else if(y_deviation <= Tolerance_NEG)   // move down
  { 
      digitalWrite(MOTOR_Y_FORWARD, HIGH);    
      digitalWrite(MOTOR_Y_BACKWARD, LOW);
      Serial.println("MOTOR Y CCW MOVING DOWN");
      delay(Motor_ON);                       
      digitalWrite(MOTOR_Y_FORWARD, HIGH);   
      digitalWrite(MOTOR_Y_BACKWARD, HIGH);
      Serial.println("MOTOR Y STOP");
      delay(Motor_OFF);     
  } 
  else if((y_deviation >= Tolerance_NEG) && (y_deviation <= Tolerance_POS))
   {
     Serial.println("MOTOR X STOP IN ELSE");
     digitalWrite(MOTOR_X_RIGHT, HIGH);
     digitalWrite(MOTOR_X_LEFT, HIGH);
      delay(Motor_OFF);   
      flag =1;
   }
  else 
    {
     Serial.println("MOTOR X STOP IN ELSE");
     digitalWrite(MOTOR_X_RIGHT, HIGH);
     digitalWrite(MOTOR_X_LEFT, HIGH);
      delay(Motor_OFF);   
    }
if ((x_deviation >= Tolerance_NEG) && (x_deviation <= Tolerance_POS) && (y_deviation >= Tolerance_NEG) && (y_deviation <= Tolerance_POS))
{
  flag = 1;
    digitalWrite(MOTOR_X_RIGHT, HIGH);
    digitalWrite(MOTOR_X_LEFT, HIGH);
    digitalWrite(MOTOR_Y_FORWARD, HIGH);   
    digitalWrite(MOTOR_Y_BACKWARD, HIGH);
    Serial.println("MOTOR Y STOP");
    delay(Motor_OFF);     

}
}


/**********************************new one********************************************/

#include <SoftwareSerial.h>
SoftwareSerial mySerial(10, 11); // RX, TX pins

int x_deviation = 0, y_deviation = 0;
char x, y;

#define MOTOR_X_RIGHT 4
#define MOTOR_X_LEFT 5
#define MOTOR_Y_FORWARD 2
#define MOTOR_Y_BACKWARD 3

#define TOLERANCE 5
#define MOTOR_ON 2000
#define MOTOR_OFF 1000

void setup() {
  pinMode(MOTOR_X_RIGHT, OUTPUT);
  pinMode(MOTOR_X_LEFT, OUTPUT);
  pinMode(MOTOR_Y_FORWARD, OUTPUT);
  pinMode(MOTOR_Y_BACKWARD, OUTPUT);

  digitalWrite(MOTOR_X_RIGHT, HIGH);
  digitalWrite(MOTOR_X_LEFT, HIGH);
  digitalWrite(MOTOR_Y_FORWARD, HIGH);
  digitalWrite(MOTOR_Y_BACKWARD, HIGH);

  Serial.begin(9600);
  mySerial.begin(9600);
  delay(2000);
}

void loop() {
  read_from_rasspberrypi();
  controlMotors();
}

void read_from_rasspberrypi() {
  if (mySerial.available() >= 2) {
    x = mySerial.read();
    y = mySerial.read();

    x_deviation = static_cast<int>(x);
    y_deviation = static_cast<int>(y);

    Serial.print("X Deviation: ");
    Serial.println(x_deviation);
    Serial.print("Y Deviation: ");
    Serial.println(y_deviation);
  }
}

void controlMotors() {  // Motor X control
  if (x_deviation > TOLERANCE) {
    digitalWrite(MOTOR_X_RIGHT, HIGH);
    digitalWrite(MOTOR_X_LEFT, LOW);
  } else if (x_deviation < -TOLERANCE) {
    digitalWrite(MOTOR_X_RIGHT, LOW);
    digitalWrite(MOTOR_X_LEFT, HIGH);
  } else {
    digitalWrite(MOTOR_X_RIGHT, HIGH);
    digitalWrite(MOTOR_X_LEFT, HIGH);
  }

  // Motor Y control
  if (y_deviation > TOLERANCE) {
    digitalWrite(MOTOR_Y_FORWARD, HIGH);
    digitalWrite(MOTOR_Y_BACKWARD, LOW);
  } else if (y_deviation < -TOLERANCE) {
    digitalWrite(MOTOR_Y_FORWARD, LOW);
    digitalWrite(MOTOR_Y_BACKWARD, HIGH);
  } else {
    digitalWrite(MOTOR_Y_FORWARD, HIGH);
    digitalWrite(MOTOR_Y_BACKWARD, HIGH);
  }

  // Stop all motors when deviations are within tolerance
  if (abs(x_deviation) <= TOLERANCE && abs(y_deviation) <= TOLERANCE) {
    digitalWrite(MOTOR_X_RIGHT, HIGH);
    digitalWrite(MOTOR_X_LEFT, HIGH);
    digitalWrite(MOTOR_Y_FORWARD, HIGH);
    digitalWrite(MOTOR_Y_BACKWARD, HIGH);
    delay(MOTOR_OFF);
    read_from_rasspberrypi();
  }
}
/*********************************************************************************/
#include <SoftwareSerial.h>
SoftwareSerial mySerial(11, 10); // RX, TX pins

int x_deviation = 0, y_deviation = 0;
char x, y;

#define MOTOR_X_RIGHT 7
#define MOTOR_X_LEFT 6
#define MOTOR_Y_FORWARD 3
#define MOTOR_Y_BACKWARD 2

#define TOLERANCE 5
#define MOTOR_ON 10
#define MOTOR_OFF 10

void setup() {
  pinMode(MOTOR_X_RIGHT, OUTPUT);
  pinMode(MOTOR_X_LEFT, OUTPUT);
  pinMode(MOTOR_Y_FORWARD, OUTPUT);
  pinMode(MOTOR_Y_BACKWARD, OUTPUT);

  digitalWrite(MOTOR_X_RIGHT, HIGH);
  digitalWrite(MOTOR_X_LEFT, HIGH);
  digitalWrite(MOTOR_Y_FORWARD, HIGH);
  digitalWrite(MOTOR_Y_BACKWARD, HIGH);

  Serial.begin(9600);
  mySerial.begin(9600);
  //delay(2000);
}

void loop() {
  read_from_rasspberrypi();
  controlMotors();
}

void read_from_rasspberrypi() {
  if (mySerial.available() >= 2) {
    x = mySerial.read();
    y = mySerial.read();

    x_deviation = static_cast<int>(x);
    y_deviation = static_cast<int>(y);

    Serial.print("X Deviation: ");
    Serial.println(x_deviation);
    Serial.print("Y Deviation: ");
    Serial.println(y_deviation);
  }
}

void controlMotors() {  // Motor X control
  if (x_deviation > TOLERANCE) {
    digitalWrite(MOTOR_X_RIGHT, HIGH);
    digitalWrite(MOTOR_X_LEFT, LOW);
   // delay(MOTOR_ON);
  } else if (x_deviation < -TOLERANCE) {
    digitalWrite(MOTOR_X_RIGHT, LOW);
    digitalWrite(MOTOR_X_LEFT, HIGH);
    //delay(MOTOR_ON);
  } else {
    digitalWrite(MOTOR_X_RIGHT, HIGH);
    digitalWrite(MOTOR_X_LEFT, HIGH);
  }

  // Motor Y control
  if (y_deviation > TOLERANCE) {
    digitalWrite(MOTOR_Y_FORWARD, HIGH);
    digitalWrite(MOTOR_Y_BACKWARD, LOW);
   // delay(MOTOR_ON);
  } else if (y_deviation < -TOLERANCE) {
    digitalWrite(MOTOR_Y_FORWARD, LOW);
    digitalWrite(MOTOR_Y_BACKWARD, HIGH);
    delay(MOTOR_ON);
  } else {
    digitalWrite(MOTOR_Y_FORWARD, HIGH);
    digitalWrite(MOTOR_Y_BACKWARD, HIGH);
  }

  // Stop all motors when deviations are within tolerance
  if (abs(x_deviation) <= TOLERANCE && abs(y_deviation) <= TOLERANCE) {
    digitalWrite(MOTOR_X_RIGHT, HIGH);
    digitalWrite(MOTOR_X_LEFT, HIGH);
    digitalWrite(MOTOR_Y_FORWARD, HIGH);
    digitalWrite(MOTOR_Y_BACKWARD, HIGH);
    delay(MOTOR_OFF);
    read_from_rasspberrypi();
  }
}
